/**
 * Authorization API
 * Authorization API
 *
 * OpenAPI spec version: 9.0.000.00.598
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiRequestChangePasswordOperation', 'model/ApiRequestDomainLookupOperation', 'model/ApiResponse', 'model/ApiResponseDomainLookupResult', 'model/Authentication', 'model/CloudUserDetails', 'model/DefaultOAuth2AccessToken', 'model/ErrorResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiRequestChangePasswordOperation'), require('../model/ApiRequestDomainLookupOperation'), require('../model/ApiResponse'), require('../model/ApiResponseDomainLookupResult'), require('../model/Authentication'), require('../model/CloudUserDetails'), require('../model/DefaultOAuth2AccessToken'), require('../model/ErrorResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.AuthorizationApi) {
      root.AuthorizationApi = {};
    }
    root.AuthorizationApi.AuthenticationApi = factory(root.AuthorizationApi.ApiClient, root.AuthorizationApi.ApiRequestChangePasswordOperation, root.AuthorizationApi.ApiRequestDomainLookupOperation, root.AuthorizationApi.ApiResponse, root.AuthorizationApi.ApiResponseDomainLookupResult, root.AuthorizationApi.Authentication, root.AuthorizationApi.CloudUserDetails, root.AuthorizationApi.DefaultOAuth2AccessToken, root.AuthorizationApi.ErrorResponse);
  }
}(this, function(ApiClient, ApiRequestChangePasswordOperation, ApiRequestDomainLookupOperation, ApiResponse, ApiResponseDomainLookupResult, Authentication, CloudUserDetails, DefaultOAuth2AccessToken, ErrorResponse) {
  'use strict';

  /**
   * Authentication service.
   * @module api/AuthenticationApi
   * @version 9.0.000.00.598
   */

  /**
   * Constructs a new AuthenticationApi. 
   * @alias module:api/AuthenticationApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the authorize operation.
     * @callback module:api/AuthenticationApi~authorizeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Endpoint to perform authorization
     * See http://callistaenterprise.se/blogg/teknik/2015/04/27/building-microservices-part-3-secure-APIs-with-OAuth/, We support implicit_grant  Implicit grant example:   curl -v -u genesys\\\\agent:password -XGET &#39;http://localhost:8095/oauth/authorize?response_type&#x3D;token &amp; client_id&#x3D;external_api_client &amp; scope&#x3D;openid &amp; redirect_uri&#x3D;http://localhost/  In this sample external_api_client is client_id of client with allowed **implicit** grant typeplease note that Location header will contain URI which is constructed from redirect_uri and contains access_code or auth_code and other optional info, sample:  Location: http://localhost#access_token&#x3D;76c785dc-ae3d-4569-8c79-cf4f23d70a07&amp;token_type&#x3D;bearer&amp;expires_in&#x3D;43199
     * @param {module:model/String} responseType Response type
     * @param {String} clientId Client ID (id of application/service registered as client in IDP)
     * @param {String} redirectUri Redirect URI - will be the part of URL returned in &#39;Location&#39; header
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Basic authorization. Example: &#39;Authorization: Basic Y3...MQ&#x3D;&#x3D;&#39;
     * @param {module:api/AuthenticationApi~authorizeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.authorize = function(responseType, clientId, redirectUri, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'responseType' is set
      if (responseType == undefined || responseType == null) {
        throw new Error("Missing the required parameter 'responseType' when calling authorize");
      }

      // verify the required parameter 'clientId' is set
      if (clientId == undefined || clientId == null) {
        throw new Error("Missing the required parameter 'clientId' when calling authorize");
      }

      // verify the required parameter 'redirectUri' is set
      if (redirectUri == undefined || redirectUri == null) {
        throw new Error("Missing the required parameter 'redirectUri' when calling authorize");
      }


      var pathParams = {
      };
      var queryParams = {
        'response_type': responseType,
        'client_id': clientId,
        'redirect_uri': redirectUri
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/oauth/authorize', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the changePassword operation.
     * @callback module:api/AuthenticationApi~changePasswordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change user password
     * Change user password
     * @param {module:model/ApiRequestChangePasswordOperation} request request
     * @param {module:api/AuthenticationApi~changePasswordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */
    this.changePassword = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling changePassword");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiResponse;

      return this.apiClient.callApi(
        '/change-password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the domainInfo operation.
     * @callback module:api/AuthenticationApi~domainInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponseDomainLookupResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get domain and authentication method by user name or domain name
     * Get domain and authentication method by user name or domain name
     * @param {module:model/ApiRequestDomainLookupOperation} lookupOperation lookupOperation
     * @param {module:api/AuthenticationApi~domainInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponseDomainLookupResult}
     */
    this.domainInfo = function(lookupOperation, callback) {
      var postBody = lookupOperation;

      // verify the required parameter 'lookupOperation' is set
      if (lookupOperation == undefined || lookupOperation == null) {
        throw new Error("Missing the required parameter 'lookupOperation' when calling domainInfo");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiResponseDomainLookupResult;

      return this.apiClient.callApi(
        '/domain-lookup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLoggedout operation.
     * @callback module:api/AuthenticationApi~getLoggedoutCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get logged out clients information
     * Get logged out clients information
     * @param {module:api/AuthenticationApi~getLoggedoutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getLoggedout = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/loggedout', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserInfo operation.
     * @callback module:api/AuthenticationApi~getUserInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CloudUserDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user principal by OAUTH token
     * This endpoint is called by oAuth2 clients to retrieve the principal by oAuth access token
     * @param {String} authorization OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; 
     * @param {Object} opts Optional parameters
     * @param {module:model/Authentication} opts.auth auth
     * @param {module:api/AuthenticationApi~getUserInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CloudUserDetails}
     */
    this.getUserInfo = function(authorization, opts, callback) {
      opts = opts || {};
      var postBody = opts['auth'];

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw new Error("Missing the required parameter 'authorization' when calling getUserInfo");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CloudUserDetails;

      return this.apiClient.callApi(
        '/userinfo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the login operation.
     * @callback module:api/AuthenticationApi~loginCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Endpoint to perform form-based authentication
     * Endpoint to perform form-based authentication
     * @param {Object} opts Optional parameters
     * @param {String} opts.username User name - should be in the format of &#39;domain\\username&#39;
     * @param {String} opts.password Password
     * @param {String} opts.domain Domain - used for SAML login only
     * @param {module:model/String} opts.saml SAML - flag indication saml login
     * @param {module:api/AuthenticationApi~loginCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.login = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'username': opts['username'],
        'password': opts['password'],
        'domain': opts['domain'],
        'saml': opts['saml']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/login', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logout operation.
     * @callback module:api/AuthenticationApi~logoutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Logout user
     * This endpoint is called by oAuth2 clients to logout user
     * @param {String} authorization OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.global If set all tokens for current user will be invalidated, otherwise only current token will be invalidated.
     * @param {module:api/AuthenticationApi~logoutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */
    this.logout = function(authorization, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw new Error("Missing the required parameter 'authorization' when calling logout");
      }


      var pathParams = {
      };
      var queryParams = {
        'global': opts['global']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiResponse;

      return this.apiClient.callApi(
        '/logout', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveToken operation.
     * @callback module:api/AuthenticationApi~retrieveTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultOAuth2AccessToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Endpoint to retrieve token
     * Can be called directly for Client Credential and Resource Owner Code flow.  Resource Owner example:   &#x60;curl client_name:client_secret@localhost:8095/oauth/token -d grant_type&#x3D;password -d client_id&#x3D;external_api_client-d scope&#x3D;openid -d username&#x3D;domain\\\\user -d password&#x3D;password&#x60;   Client credentials example:   &#x60;curl client_name:client_secret@localhost:8095/oauth/token -d grant_type&#x3D;client_credentials -d scope&#x3D;openid&#x60;
     * @param {module:api/AuthenticationApi~retrieveTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultOAuth2AccessToken}
     */
    this.retrieveToken = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = DefaultOAuth2AccessToken;

      return this.apiClient.callApi(
        '/oauth/token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
