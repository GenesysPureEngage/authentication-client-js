/**
 * Authentication API
 * Authentication API
 *
 * OpenAPI spec version: 9.0.000.22.1446
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiResponse', 'model/AuthSchemeLookupData', 'model/ChangePasswordOperation', 'model/CloudUserDetails', 'model/DefaultOAuth2AccessToken', 'model/ErrorResponse', 'model/OpenIdUserInfo'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiResponse'), require('../model/AuthSchemeLookupData'), require('../model/ChangePasswordOperation'), require('../model/CloudUserDetails'), require('../model/DefaultOAuth2AccessToken'), require('../model/ErrorResponse'), require('../model/OpenIdUserInfo'));
  } else {
    // Browser globals (root is window)
    if (!root.AuthenticationApi) {
      root.AuthenticationApi = {};
    }
    root.AuthenticationApi.AuthenticationApi = factory(root.AuthenticationApi.ApiClient, root.AuthenticationApi.ApiResponse, root.AuthenticationApi.AuthSchemeLookupData, root.AuthenticationApi.ChangePasswordOperation, root.AuthenticationApi.CloudUserDetails, root.AuthenticationApi.DefaultOAuth2AccessToken, root.AuthenticationApi.ErrorResponse, root.AuthenticationApi.OpenIdUserInfo);
  }
}(this, function(ApiClient, ApiResponse, AuthSchemeLookupData, ChangePasswordOperation, CloudUserDetails, DefaultOAuth2AccessToken, ErrorResponse, OpenIdUserInfo) {
  'use strict';

  /**
   * Authentication service.
   * @module api/AuthenticationApi
   * @version 9.0.000.22.1446
   */

  /**
   * Constructs a new AuthenticationApi. 
   * @alias module:api/AuthenticationApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Perform authorization.
     * Perform authorization based on the code grant type &amp;mdash; either Authorization Code Grant or Implicit Grant. For more information, see [Authorization Endpoint](https://tools.ietf.org/html/rfc6749#section-3.1). **Note:** For the optional **scope** parameter, the Authentication API supports only the &#39;*&#39; value.
     * @param {module:model/String} responseType The response type to let the Authentication API know which grant flow you&#39;re using. Possible values are &#39;code&#39; for Authorization Code Grant or &#39;token&#39; for Implicit Grant. For more information about this parameter, see [Response Type](https://tools.ietf.org/html/rfc6749#section-3.1.1).
     * @param {String} redirectUri The URI that you want users to be redirected to after entering valid credentials during an Implicit or Authorization Code grant. The Authentication API includes this as part of the URI it returns in the &#39;Location&#39; header.
     * @param {String} clientId The ID of the application or service that is registered as the client. You&#39;ll need to get this value from your PureEngage Cloud representative.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Basic authorization. For example: &#39;Authorization: Basic Y3...MQ&#x3D;&#x3D;&#39;
     * @param {module:model/String} opts.scope Scope
     * @param {Boolean} opts.hideTenant Hide tenant field in Authorization Code Grant UI (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.authorizeWithHttpInfo = function(responseType, redirectUri, clientId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'responseType' is set
      if (responseType === undefined || responseType === null) {
        throw new Error("Missing the required parameter 'responseType' when calling authorize");
      }

      // verify the required parameter 'redirectUri' is set
      if (redirectUri === undefined || redirectUri === null) {
        throw new Error("Missing the required parameter 'redirectUri' when calling authorize");
      }

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling authorize");
      }


      var pathParams = {
      };
      var queryParams = {
        'response_type': responseType,
        'scope': opts['scope'],
        'redirect_uri': redirectUri,
        'client_id': clientId,
        'hideTenant': opts['hideTenant'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/oauth/authorize', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Perform authorization.
     * Perform authorization based on the code grant type &amp;mdash; either Authorization Code Grant or Implicit Grant. For more information, see [Authorization Endpoint](https://tools.ietf.org/html/rfc6749#section-3.1). **Note:** For the optional **scope** parameter, the Authentication API supports only the &#39;*&#39; value.
     * @param {module:model/String} responseType The response type to let the Authentication API know which grant flow you&#39;re using. Possible values are &#39;code&#39; for Authorization Code Grant or &#39;token&#39; for Implicit Grant. For more information about this parameter, see [Response Type](https://tools.ietf.org/html/rfc6749#section-3.1.1).
     * @param {String} redirectUri The URI that you want users to be redirected to after entering valid credentials during an Implicit or Authorization Code grant. The Authentication API includes this as part of the URI it returns in the &#39;Location&#39; header.
     * @param {String} clientId The ID of the application or service that is registered as the client. You&#39;ll need to get this value from your PureEngage Cloud representative.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Basic authorization. For example: &#39;Authorization: Basic Y3...MQ&#x3D;&#x3D;&#39;
     * @param {module:model/String} opts.scope Scope
     * @param {Boolean} opts.hideTenant Hide tenant field in Authorization Code Grant UI (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.authorize = function(responseType, redirectUri, clientId, opts) {
      return this.authorizeWithHttpInfo(responseType, redirectUri, clientId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Change password.
     * Change the user&#39;s password.
     * @param {module:model/ChangePasswordOperation} request request
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot;  (default to bearer)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponse} and HTTP response
     */
    this.changePasswordWithHttpInfo = function(request, opts) {
      opts = opts || {};
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling changePassword");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiResponse;

      return this.apiClient.callApi(
        '/change-password', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Change password.
     * Change the user&#39;s password.
     * @param {module:model/ChangePasswordOperation} request request
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot;  (default to bearer)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponse}
     */
    this.changePassword = function(request, opts) {
      return this.changePasswordWithHttpInfo(request, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get OpenID user information by access token.
     * Get information about a user by their OAuth 2 access token.
     * @param {String} authorization The OAuth 2 bearer access token you received from &#x60;/auth/v3/oauth/token&#x60;. For example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OpenIdUserInfo} and HTTP response
     */
    this.getInfoWithHttpInfo = function(authorization) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getInfo");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OpenIdUserInfo;

      return this.apiClient.callApi(
        '/openid/userinfo', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get OpenID user information by access token.
     * Get information about a user by their OAuth 2 access token.
     * @param {String} authorization The OAuth 2 bearer access token you received from &#x60;/auth/v3/oauth/token&#x60;. For example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OpenIdUserInfo}
     */
    this.getInfo = function(authorization) {
      return this.getInfoWithHttpInfo(authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get user information by access token.
     * Get information about a user by their OAuth 2 access token.
     * @param {String} authorization The OAuth 2 bearer access token you received from &#x60;/auth/v3/oauth/token&#x60;. For example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CloudUserDetails} and HTTP response
     */
    this.getInfo1WithHttpInfo = function(authorization) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getInfo1");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CloudUserDetails;

      return this.apiClient.callApi(
        '/userinfo', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get user information by access token.
     * Get information about a user by their OAuth 2 access token.
     * @param {String} authorization The OAuth 2 bearer access token you received from &#x60;/auth/v3/oauth/token&#x60;. For example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CloudUserDetails}
     */
    this.getInfo1 = function(authorization) {
      return this.getInfo1WithHttpInfo(authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve access token.
     * Retrieve an access token based on the grant type &amp;mdash; Authorization Code Grant, Resource Owner Password Credentials Grant or Client Credentials Grant. For more information, see [Token Endpoint](https://tools.ietf.org/html/rfc6749). **Note:** For the optional **scope** parameter, the Authentication API supports only the &#39;*&#39; value.
     * @param {module:model/String} grantType The grant type you use to implement authentication.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Basic authorization. For example: &#39;Authorization: Basic Y3...MQ&#x3D;&#x3D;&#39;
     * @param {String} opts.accept The media type the Authentication API should should use for the response. For example: &#39;Accept: application/x-www-form-urlencoded&#39;
     * @param {module:model/String} opts.scope Scope
     * @param {String} opts.clientId The ID of the application or service that is registered as the client. You&#39;ll need to get this value from your PureEngage Cloud representative.
     * @param {String} opts.refreshToken See [Refresh Token](https://tools.ietf.org/html/rfc6749#section-1.5) for details.
     * @param {String} opts.username The agent&#39;s username.
     * @param {String} opts.password The agent&#39;s password
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DefaultOAuth2AccessToken} and HTTP response
     */
    this.retrieveTokenWithHttpInfo = function(grantType, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'grantType' is set
      if (grantType === undefined || grantType === null) {
        throw new Error("Missing the required parameter 'grantType' when calling retrieveToken");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept']
      };
      var formParams = {
        'grant_type': grantType,
        'scope': opts['scope'],
        'client_id': opts['clientId'],
        'refresh_token': opts['refreshToken'],
        'username': opts['username'],
        'password': opts['password']
      };

      var authNames = [];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = DefaultOAuth2AccessToken;

      return this.apiClient.callApi(
        '/oauth/token', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve access token.
     * Retrieve an access token based on the grant type &amp;mdash; Authorization Code Grant, Resource Owner Password Credentials Grant or Client Credentials Grant. For more information, see [Token Endpoint](https://tools.ietf.org/html/rfc6749). **Note:** For the optional **scope** parameter, the Authentication API supports only the &#39;*&#39; value.
     * @param {module:model/String} grantType The grant type you use to implement authentication.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Basic authorization. For example: &#39;Authorization: Basic Y3...MQ&#x3D;&#x3D;&#39;
     * @param {String} opts.accept The media type the Authentication API should should use for the response. For example: &#39;Accept: application/x-www-form-urlencoded&#39;
     * @param {module:model/String} opts.scope Scope
     * @param {String} opts.clientId The ID of the application or service that is registered as the client. You&#39;ll need to get this value from your PureEngage Cloud representative.
     * @param {String} opts.refreshToken See [Refresh Token](https://tools.ietf.org/html/rfc6749#section-1.5) for details.
     * @param {String} opts.username The agent&#39;s username.
     * @param {String} opts.password The agent&#39;s password
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DefaultOAuth2AccessToken}
     */
    this.retrieveToken = function(grantType, opts) {
      return this.retrieveTokenWithHttpInfo(grantType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Perform form-based authentication.
     * Perform form-based authentication by submitting an agent&#39;s username and password.
     * @param {String} username The agent&#39;s username, formatted as &#39;tenant\\username&#39;.
     * @param {String} password The agent&#39;s password.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.saml Specifies whether to login using [Security Assertion Markup Language](https://en.wikipedia.org/wiki/Security_Assertion_Markup_Language) (SAML).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.signInWithHttpInfo = function(username, password, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling signIn");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling signIn");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'username': username,
        'password': password,
        'saml': opts['saml']
      };

      var authNames = [];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/sign-in', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Perform form-based authentication.
     * Perform form-based authentication by submitting an agent&#39;s username and password.
     * @param {String} username The agent&#39;s username, formatted as &#39;tenant\\username&#39;.
     * @param {String} password The agent&#39;s password.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.saml Specifies whether to login using [Security Assertion Markup Language](https://en.wikipedia.org/wiki/Security_Assertion_Markup_Language) (SAML).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.signIn = function(username, password, opts) {
      return this.signInWithHttpInfo(username, password, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Sign-out a logged in user.
     * Sign-out the current user and invalidate either the current token or all tokens associated with the user.
     * @param {String} authorization The OAuth 2 bearer access token you received from &#x60;/auth/v3/oauth/token&#x60;. For example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.global Specifies whether to invalidate all tokens for the current user (&#x60;true&#x60;) or only the current token (&#x60;false&#x60;).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponse} and HTTP response
     */
    this.signOutWithHttpInfo = function(authorization, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling signOut");
      }


      var pathParams = {
      };
      var queryParams = {
        'global': opts['global'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiResponse;

      return this.apiClient.callApi(
        '/sign-out', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Sign-out a logged in user.
     * Sign-out the current user and invalidate either the current token or all tokens associated with the user.
     * @param {String} authorization The OAuth 2 bearer access token you received from &#x60;/auth/v3/oauth/token&#x60;. For example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.global Specifies whether to invalidate all tokens for the current user (&#x60;true&#x60;) or only the current token (&#x60;false&#x60;).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponse}
     */
    this.signOut = function(authorization, opts) {
      return this.signOutWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Sign-out a logged in user.
     * Sign-out the current user and invalidate either the current token or all tokens associated with the user.
     * @param {String} authorization The OAuth 2 bearer access token you received from &#x60;/auth/v3/oauth/token&#x60;. For example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.global Specifies whether to invalidate all tokens for the current user (&#x60;true&#x60;) or only the current token (&#x60;false&#x60;).
     * @param {String} opts.redirectUri Specifies URI where browser will be redirected after successful sign-out
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponse} and HTTP response
     */
    this.signOut1WithHttpInfo = function(authorization, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling signOut1");
      }


      var pathParams = {
      };
      var queryParams = {
        'global': opts['global'],
        'redirectUri': opts['redirectUri'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiResponse;

      return this.apiClient.callApi(
        '/sign-out', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Sign-out a logged in user.
     * Sign-out the current user and invalidate either the current token or all tokens associated with the user.
     * @param {String} authorization The OAuth 2 bearer access token you received from &#x60;/auth/v3/oauth/token&#x60;. For example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.global Specifies whether to invalidate all tokens for the current user (&#x60;true&#x60;) or only the current token (&#x60;false&#x60;).
     * @param {String} opts.redirectUri Specifies URI where browser will be redirected after successful sign-out
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponse}
     */
    this.signOut1 = function(authorization, opts) {
      return this.signOut1WithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get authentication scheme.
     * Get the authentication scheme by user name or tenant name. The return value is   &#39;saml&#39; if the contact center has [Security Assertion Markup Language](https://en.wikipedia.org/wiki/Security_Assertion_Markup_Language)   (SAML) enabled; otherwise, the return value is &#39;basic&#39;.
     * @param {Object} opts Optional parameters
     * @param {module:model/AuthSchemeLookupData} opts.lookupData Data for scheme lookup.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponse} and HTTP response
     */
    this.tenantInfoWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['lookupData'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiResponse;

      return this.apiClient.callApi(
        '/auth-scheme', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get authentication scheme.
     * Get the authentication scheme by user name or tenant name. The return value is   &#39;saml&#39; if the contact center has [Security Assertion Markup Language](https://en.wikipedia.org/wiki/Security_Assertion_Markup_Language)   (SAML) enabled; otherwise, the return value is &#39;basic&#39;.
     * @param {Object} opts Optional parameters
     * @param {module:model/AuthSchemeLookupData} opts.lookupData Data for scheme lookup.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponse}
     */
    this.tenantInfo = function(opts) {
      return this.tenantInfoWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
